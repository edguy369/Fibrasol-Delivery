@{
    ViewData["Title"] = "Reporte de Ventas";
}

<style>
    .page-header {
        background: linear-gradient(135deg, #4f46e5 0%, #06b6d4 100%);
        color: white;
        padding: 2rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        box-shadow: 0 8px 32px rgba(79, 70, 229, 0.3);
    }

    .btn-primary-custom {
        background: linear-gradient(135deg, #4f46e5 0%, #06b6d4 100%);
        border: none;
        border-radius: 8px;
        padding: 0.5rem 1.5rem;
        font-weight: 600;
        color: white !important;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(79, 70, 229, 0.3);
    }

    .btn-primary-custom:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(79, 70, 229, 0.4);
        background: linear-gradient(135deg, #3730a3 0%, #0891b2 100%);
        color: white !important;
    }

    .filter-container {
        background: white;
        border-radius: 15px;
        padding: 1.5rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        margin-bottom: 2rem;
    }

    .chart-container {
        background: white;
        border-radius: 15px;
        padding: 1.5rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        margin-bottom: 2rem;
        position: relative;
        height: 500px;
    }

    .table-container {
        background: white;
        border-radius: 15px;
        padding: 1.5rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    }

    .form-control:focus {
        border-color: #4f46e5;
        box-shadow: 0 0 0 0.2rem rgba(79, 70, 229, 0.25);
    }

    .dataTables_wrapper .dataTables_length,
    .dataTables_wrapper .dataTables_filter,
    .dataTables_wrapper .dataTables_info,
    .dataTables_wrapper .dataTables_paginate {
        margin-bottom: 1rem;
    }

    .dataTables_wrapper .dataTables_paginate .paginate_button.current {
        background: linear-gradient(135deg, #4f46e5 0%, #06b6d4 100%) !important;
        border-color: #4f46e5 !important;
        color: white !important;
    }

    .dataTables_wrapper .dataTables_paginate .paginate_button:hover {
        background: #f8fafc !important;
        border-color: #4f46e5 !important;
        color: #4f46e5 !important;
    }

    .table thead th {
        background: linear-gradient(135deg, #4f46e5 0%, #06b6d4 100%);
        color: white;
        border: none;
        font-weight: 600;
    }

    .table tbody tr:hover {
        background-color: #f8fafc;
    }

    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.8);
        display: none;
        align-items: center;
        justify-content: center;
        border-radius: 15px;
        z-index: 1000;
    }

    .stats-card {
        background: white;
        border-radius: 15px;
        padding: 1.5rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        text-align: center;
        margin-bottom: 2rem;
    }

    .stats-number {
        font-size: 2rem;
        font-weight: bold;
        color: #4f46e5;
        margin-bottom: 0.5rem;
    }

    .stats-label {
        color: #6b7280;
        font-size: 0.875rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
</style>

<div class="page-header mt-4">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1 class="mb-2"><i class="bi bi-graph-up me-3"></i>Reporte de Ventas</h1>
            <p class="mb-0 opacity-75">Análisis de desempeño de vendedores</p>
        </div>
        <div class="d-flex gap-2">
            <button type="button" class="btn btn-light" onclick="exportReport()">
                <i class="bi bi-download me-2"></i>Exportar
            </button>
            <button type="button" class="btn btn-light" onclick="refreshReport()">
                <i class="bi bi-arrow-clockwise me-2"></i>Actualizar
            </button>
        </div>
    </div>
</div>

<!-- Date Range Filter -->
<div class="filter-container">
    <div class="row align-items-end">
        <div class="col-md-3">
            <label for="startDate" class="form-label">Fecha Inicio</label>
            <input type="date" class="form-control" id="startDate">
        </div>
        <div class="col-md-3">
            <label for="endDate" class="form-label">Fecha Fin</label>
            <input type="date" class="form-control" id="endDate">
        </div>
        <div class="col-md-3">
            <label class="form-label">Período Rápido</label>
            <select class="form-control" id="quickPeriod" onchange="applyQuickPeriod()">
                <option value="">Seleccionar período</option>
                <option value="thisMonth">Este mes</option>
                <option value="lastMonth">Mes anterior</option>
                <option value="thisQuarter">Este trimestre</option>
                <option value="thisYear">Este año</option>
                <option value="lastYear">Año anterior</option>
            </select>
        </div>
        <div class="col-md-3">
            <button type="button" class="btn btn-primary-custom w-100" onclick="generateReport()">
                <i class="bi bi-search me-2"></i>Generar Reporte
            </button>
        </div>
    </div>
</div>

<!-- Statistics Cards -->
<div class="row mb-4" id="statsContainer">
    <div class="col-md-3">
        <div class="stats-card">
            <div class="stats-number" id="totalSales">Q 0.00</div>
            <div class="stats-label">Ventas Totales</div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="stats-card">
            <div class="stats-number" id="avgSales">Q 0.00</div>
            <div class="stats-label">Promedio por Vendedor</div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="stats-card">
            <div class="stats-number" id="topSeller">-</div>
            <div class="stats-label">Mejor Vendedor</div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="stats-card">
            <div class="stats-number" id="totalSellers">0</div>
            <div class="stats-label">Total Vendedores</div>
        </div>
    </div>
</div>

<!-- Chart Container -->
<div class="chart-container">
    <div class="loading-overlay" id="chartLoading">
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <div class="mt-2">Generando gráfico...</div>
        </div>
    </div>
    <canvas id="salesChart"></canvas>
</div>

<!-- Data Table -->
<div class="table-container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h5 class="mb-0">Detalle de Ventas por Vendedor</h5>
        <span class="badge bg-primary" id="reportPeriod">Mes actual</span>
    </div>
    <table id="salesTable" class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Ranking</th>
                <th>Vendedor</th>
                <th>Total Ventas</th>
                <th>% del Total</th>
                <th>Performance</th>
            </tr>
        </thead>
        <tbody>
            <!-- Data will be loaded via JavaScript -->
        </tbody>
    </table>
</div>

@section Scripts {
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <!-- DataTables -->
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.7/css/dataTables.bootstrap5.min.css">
    <script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.7/js/dataTables.bootstrap5.min.js"></script>

    <script>
        let salesChart = null;
        let salesDataTable = null;
        let currentReportData = [];

        $(document).ready(function() {
            initializePage();
            generateReport(); // Load current month by default
        });

        function initializePage() {
            // Set default dates to current month
            const now = new Date();
            const firstDay = new Date(now.getFullYear(), now.getMonth(), 1);
            const lastDay = new Date(now.getFullYear(), now.getMonth() + 1, 0);

            document.getElementById('startDate').value = firstDay.toISOString().split('T')[0];
            document.getElementById('endDate').value = lastDay.toISOString().split('T')[0];

            // Initialize DataTable
            salesDataTable = $('#salesTable').DataTable({
                language: {
                    url: 'https://cdn.datatables.net/plug-ins/1.13.7/i18n/es-ES.json'
                },
                pageLength: 10,
                order: [[0, 'asc']], // Sort by ranking
                columnDefs: [
                    {
                        targets: [2], // Total Sales column
                        render: function(data, type, row) {
                            if (type === 'display') {
                                return 'Q ' + parseFloat(data).toLocaleString('es-GT', {minimumFractionDigits: 2});
                            }
                            return data;
                        }
                    },
                    {
                        targets: [3], // Percentage column
                        render: function(data, type, row) {
                            if (type === 'display') {
                                return data + '%';
                            }
                            return data;
                        }
                    },
                    {
                        targets: [4], // Performance column
                        render: function(data, type, row) {
                            if (type === 'display') {
                                const percentage = parseFloat(data);
                                let badgeClass = 'bg-secondary';
                                let icon = 'bi-dash';

                                if (percentage > 20) {
                                    badgeClass = 'bg-success';
                                    icon = 'bi-arrow-up';
                                } else if (percentage > 10) {
                                    badgeClass = 'bg-warning';
                                    icon = 'bi-arrow-right';
                                } else if (percentage > 0) {
                                    badgeClass = 'bg-info';
                                    icon = 'bi-arrow-down-right';
                                }

                                return `<span class="badge ${badgeClass}"><i class="bi ${icon} me-1"></i>${percentage}%</span>`;
                            }
                            return data;
                        }
                    }
                ]
            });
        }

        function applyQuickPeriod() {
            const period = document.getElementById('quickPeriod').value;
            const now = new Date();
            let startDate, endDate;

            switch(period) {
                case 'thisMonth':
                    startDate = new Date(now.getFullYear(), now.getMonth(), 1);
                    endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);
                    break;
                case 'lastMonth':
                    startDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);
                    endDate = new Date(now.getFullYear(), now.getMonth(), 0);
                    break;
                case 'thisQuarter':
                    const quarter = Math.floor(now.getMonth() / 3);
                    startDate = new Date(now.getFullYear(), quarter * 3, 1);
                    endDate = new Date(now.getFullYear(), quarter * 3 + 3, 0);
                    break;
                case 'thisYear':
                    startDate = new Date(now.getFullYear(), 0, 1);
                    endDate = new Date(now.getFullYear(), 11, 31);
                    break;
                case 'lastYear':
                    startDate = new Date(now.getFullYear() - 1, 0, 1);
                    endDate = new Date(now.getFullYear() - 1, 11, 31);
                    break;
                default:
                    return;
            }

            document.getElementById('startDate').value = startDate.toISOString().split('T')[0];
            document.getElementById('endDate').value = endDate.toISOString().split('T')[0];
        }

        function generateReport() {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;

            if (!startDate || !endDate) {
                alert('Por favor, seleccione las fechas de inicio y fin.');
                return;
            }

            if (new Date(startDate) > new Date(endDate)) {
                alert('La fecha de inicio no puede ser mayor que la fecha de fin.');
                return;
            }

            showLoading();

            // Update report period badge
            const startFormatted = new Date(startDate).toLocaleDateString('es-GT');
            const endFormatted = new Date(endDate).toLocaleDateString('es-GT');
            document.getElementById('reportPeriod').textContent = `${startFormatted} - ${endFormatted}`;

            const requestData = {
                startDate: startDate,
                endDate: endDate
            };

            $.ajax({
                url: '/sales-persons/report',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(requestData),
                success: function(data) {
                    currentReportData = data;
                    updateStatistics(data);
                    updateChart(data);
                    updateDataTable(data);
                    hideLoading();
                },
                error: function(xhr, status, error) {
                    console.error('Error generating report:', error);
                    alert('Error al generar el reporte. Por favor, inténtelo de nuevo.');
                    hideLoading();
                }
            });
        }

        function updateStatistics(data) {
            const totalSales = data.reduce((sum, item) => sum + item.totalSales, 0);
            const avgSales = data.length > 0 ? totalSales / data.length : 0;
            const topSeller = data.length > 0 ? data[0].salesPerson.name : '-';
            const totalSellers = data.length;

            document.getElementById('totalSales').textContent = 'Q ' + totalSales.toLocaleString('es-GT', {minimumFractionDigits: 2});
            document.getElementById('avgSales').textContent = 'Q ' + avgSales.toLocaleString('es-GT', {minimumFractionDigits: 2});
            document.getElementById('topSeller').textContent = topSeller;
            document.getElementById('totalSellers').textContent = totalSellers;
        }

        function updateChart(data) {
            const ctx = document.getElementById('salesChart').getContext('2d');

            // Destroy existing chart if it exists
            if (salesChart) {
                salesChart.destroy();
            }

            const labels = data.map(item => item.salesPerson.name);
            const salesData = data.map(item => item.totalSales);

            // Generate colors for each bar
            const backgroundColors = data.map((_, index) => {
                const hue = (index * 137.5) % 360; // Golden angle approximation
                return `hsla(${hue}, 70%, 60%, 0.8)`;
            });

            const borderColors = backgroundColors.map(color => color.replace('0.8', '1'));

            salesChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Ventas Totales',
                        data: salesData,
                        backgroundColor: backgroundColors,
                        borderColor: borderColors,
                        borderWidth: 2,
                        borderRadius: 8,
                        borderSkipped: false
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Ventas por Vendedor',
                            font: {
                                size: 16,
                                weight: 'bold'
                            },
                            padding: 20
                        },
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return 'Ventas: Q ' + context.parsed.y.toLocaleString('es-GT', {minimumFractionDigits: 2});
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return 'Q ' + value.toLocaleString('es-GT');
                                }
                            },
                            grid: {
                                color: 'rgba(0, 0, 0, 0.1)'
                            }
                        },
                        x: {
                            grid: {
                                display: false
                            },
                            ticks: {
                                maxRotation: 45,
                                minRotation: 0
                            }
                        }
                    },
                    animation: {
                        duration: 1000,
                        easing: 'easeInOutQuart'
                    }
                }
            });
        }

        function updateDataTable(data) {
            const totalSales = data.reduce((sum, item) => sum + item.totalSales, 0);

            const tableData = data.map((item, index) => {
                const percentage = totalSales > 0 ? ((item.totalSales / totalSales) * 100).toFixed(1) : 0;
                return [
                    index + 1, // Ranking
                    item.salesPerson.name,
                    item.totalSales,
                    percentage,
                    percentage // Performance (same as percentage for simplicity)
                ];
            });

            salesDataTable.clear();
            salesDataTable.rows.add(tableData);
            salesDataTable.draw();
        }

        function showLoading() {
            document.getElementById('chartLoading').style.display = 'flex';
        }

        function hideLoading() {
            document.getElementById('chartLoading').style.display = 'none';
        }

        function refreshReport() {
            generateReport();
        }

        function exportReport() {
            // Basic export functionality - can be enhanced with libraries like jsPDF or ExcelJS
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;

            let csvContent = "data:text/csv;charset=utf-8,";
            csvContent += "Reporte de Ventas - " + startDate + " a " + endDate + "\n\n";
            csvContent += "Ranking,Vendedor,Total Ventas,Porcentaje\n";

            currentReportData.forEach((item, index) => {
                const totalSales = currentReportData.reduce((sum, i) => sum + i.totalSales, 0);
                const percentage = totalSales > 0 ? ((item.totalSales / totalSales) * 100).toFixed(1) : 0;
                csvContent += `${index + 1},${item.salesPerson.name},${item.totalSales},${percentage}%\n`;
            });

            const encodedUri = encodeURI(csvContent);
            const link = document.createElement("a");
            link.setAttribute("href", encodedUri);
            link.setAttribute("download", `reporte-ventas-${startDate}-${endDate}.csv`);
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    </script>
}