@{
    ViewData["Title"] = "Dashboard";
}

<style>
    .dashboard-container {
        padding: 2rem 0;
    }

    .page-header {
        background: linear-gradient(135deg, #4f46e5 0%, #06b6d4 100%);
        color: white;
        padding: 2rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        box-shadow: 0 8px 32px rgba(79, 70, 229, 0.3);
    }

    .dashboard-card {
        background: white;
        border-radius: 15px;
        padding: 2rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        transition: all 0.3s ease;
        height: 100%;
        border-left: 5px solid;
        position: relative;
        overflow: hidden;
    }

    .dashboard-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
    }

    .dashboard-card::before {
        content: '';
        position: absolute;
        top: 0;
        right: 0;
        width: 100px;
        height: 100px;
        border-radius: 50%;
        opacity: 0.1;
        transition: all 0.3s ease;
    }

    .dashboard-card:hover::before {
        transform: scale(1.2);
        opacity: 0.15;
    }

    .card-drivers {
        border-left-color: #10b981;
    }

    .card-drivers::before {
        background-color: #10b981;
    }

    .card-clients {
        border-left-color: #3b82f6;
    }

    .card-clients::before {
        background-color: #3b82f6;
    }

    .card-orders {
        border-left-color: #f59e0b;
    }

    .card-orders::before {
        background-color: #f59e0b;
    }

    .card-invoices {
        border-left-color: #ef4444;
    }

    .card-invoices::before {
        background-color: #ef4444;
    }

    .card-salespersons {
        border-left-color: #8b5cf6;
    }

    .card-salespersons::before {
        background-color: #8b5cf6;
    }

    .card-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
        opacity: 0.8;
    }

    .card-drivers .card-icon {
        color: #10b981;
    }

    .card-clients .card-icon {
        color: #3b82f6;
    }

    .card-orders .card-icon {
        color: #f59e0b;
    }

    .card-invoices .card-icon {
        color: #ef4444;
    }

    .card-salespersons .card-icon {
        color: #8b5cf6;
    }

    .card-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: #6b7280;
        margin-bottom: 0.5rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .card-number {
        font-size: 2.5rem;
        font-weight: 700;
        color: #1f2937;
        margin-bottom: 0.5rem;
        line-height: 1;
    }

    .card-subtitle {
        font-size: 0.9rem;
        color: #9ca3af;
        margin: 0;
    }

    .loading-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid #f3f3f3;
        border-top: 3px solid #4f46e5;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .invoice-comparison {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-top: 0.5rem;
    }

    .progress-bar {
        flex: 1;
        height: 8px;
        background-color: #f3f4f6;
        border-radius: 4px;
        overflow: hidden;
    }

    .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #10b981, #34d399);
        border-radius: 4px;
        transition: width 0.3s ease;
        width: 0%;
    }

    .progress-text {
        font-size: 0.8rem;
        color: #6b7280;
        font-weight: 500;
        white-space: nowrap;
    }

    .error-message {
        color: #ef4444;
        font-size: 0.9rem;
        font-style: italic;
    }

    .table-container {
        background: white;
        border-radius: 15px;
        padding: 1.5rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        margin-top: 2rem;
    }

    .dataTables_wrapper .dataTables_length,
    .dataTables_wrapper .dataTables_filter,
    .dataTables_wrapper .dataTables_info,
    .dataTables_wrapper .dataTables_paginate {
        margin-bottom: 1rem;
    }

    .dataTables_wrapper .dataTables_paginate .paginate_button.current {
        background: linear-gradient(135deg, #4f46e5 0%, #06b6d4 100%) !important;
        border-color: #4f46e5 !important;
        color: white !important;
    }

    .dataTables_wrapper .dataTables_paginate .paginate_button:hover {
        background: #f8fafc !important;
        border-color: #4f46e5 !important;
        color: #4f46e5 !important;
    }

    .table thead th {
        background: linear-gradient(135deg, #4f46e5 0%, #06b6d4 100%);
        color: white;
        border: none;
        font-weight: 600;
    }

    .table tbody tr:hover {
        background-color: #f8fafc;
    }

    .status-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .status-pending {
        background-color: #fef3c7;
        color: #92400e;
    }

    .status-in-progress {
        background-color: #dbeafe;
        color: #1e40af;
    }

    .status-delivered {
        background-color: #d1fae5;
        color: #065f46;
    }

    .status-cancelled {
        background-color: #fee2e2;
        color: #991b1b;
    }

    .btn-view {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        border: none;
        color: white;
        padding: 0.375rem 0.75rem;
        border-radius: 6px;
        font-size: 0.875rem;
        transition: all 0.3s ease;
    }

    .btn-view:hover {
        background: linear-gradient(135deg, #059669 0%, #047857 100%);
        transform: translateY(-1px);
        color: white;
    }

    .btn-print {
        background: linear-gradient(135deg, #7c3aed 0%, #5b21b6 100%);
        border: none;
        color: white;
        padding: 0.375rem 0.75rem;
        border-radius: 6px;
        font-size: 0.875rem;
        transition: all 0.3s ease;
    }

    .btn-print:hover {
        background: linear-gradient(135deg, #5b21b6 0%, #4c1d95 100%);
        transform: translateY(-1px);
        color: white;
    }

    .table-section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
    }

    .table-section-header h3 {
        color: #1f2937;
        font-weight: 600;
        margin: 0;
    }

    .table-section-header .badge {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        color: white;
        font-size: 0.8rem;
        padding: 0.4rem 0.8rem;
    }
</style>

<div class="dashboard-container">
    <div class="page-header">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h1 class="mb-2"><i class="bi bi-speedometer2 me-3"></i>Dashboard</h1>
                <p class="mb-0 opacity-75">Resumen general del sistema de entregas</p>
            </div>
            <div class="text-end">
                <p class="mb-0 opacity-75">Última actualización</p>
                <p class="mb-0" id="lastUpdate">Cargando...</p>
            </div>
        </div>
    </div>

    <div class="row g-4">
        <!-- Drivers Card -->
        <div class="col-xl col-lg-4 col-md-6">
            <div class="dashboard-card card-drivers">
                <div class="card-icon">
                    <i class="bi bi-person-badge"></i>
                </div>
                <h6 class="card-title">Mensajeros</h6>
                <div class="card-number" id="driversCount">
                    <div class="loading-spinner"></div>
                </div>
                <p class="card-subtitle">Total de mensajeros registrados</p>
            </div>
        </div>

        <!-- Clients Card -->
        <div class="col-xl col-lg-4 col-md-6">
            <div class="dashboard-card card-clients">
                <div class="card-icon">
                    <i class="bi bi-people"></i>
                </div>
                <h6 class="card-title">Clientes</h6>
                <div class="card-number" id="clientsCount">
                    <div class="loading-spinner"></div>
                </div>
                <p class="card-subtitle">Total de clientes activos</p>
            </div>
        </div>

        <!-- SalesPersons Card -->
        <div class="col-xl col-lg-4 col-md-6">
            <div class="dashboard-card card-salespersons">
                <div class="card-icon">
                    <i class="bi bi-person-badge-fill"></i>
                </div>
                <h6 class="card-title">Vendedores</h6>
                <div class="card-number" id="salesPersonsCount">
                    <div class="loading-spinner"></div>
                </div>
                <p class="card-subtitle">Total de vendedores registrados</p>
            </div>
        </div>

        <!-- Delivery Orders Card -->
        <div class="col-xl col-lg-4 col-md-6">
            <div class="dashboard-card card-orders">
                <div class="card-icon">
                    <i class="bi bi-truck"></i>
                </div>
                <h6 class="card-title">Órdenes de Entrega</h6>
                <div class="card-number" id="ordersCount">
                    <div class="loading-spinner"></div>
                </div>
                <p class="card-subtitle">Total de órdenes gestionadas</p>
            </div>
        </div>

        <!-- Invoices Card -->
        <div class="col-xl col-lg-4 col-md-6">
            <div class="dashboard-card card-invoices">
                <div class="card-icon">
                    <i class="bi bi-receipt"></i>
                </div>
                <h6 class="card-title">Facturas</h6>
                <div class="card-number" id="invoicesCount">
                    <div class="loading-spinner"></div>
                </div>
                <div class="invoice-comparison">
                    <div class="progress-bar">
                        <div class="progress-fill" id="invoicesProgress"></div>
                    </div>
                    <div class="progress-text" id="invoicesText">0/0 firmadas</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Unsigned Delivery Orders Section -->
    <div class="table-container">
        <div class="table-section-header">
            <h3><i class="bi bi-exclamation-triangle-fill me-2"></i>Órdenes Pendientes de Firma</h3>
            <span class="badge">Sin Firmar</span>
        </div>
        <table id="unsignedOrdersTable" class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Estado</th>
                    <th>Fecha Creación</th>
                    <th>Total</th>
                    <th width="140">Acciones</th>
                </tr>
            </thead>
            <tbody>
                <!-- Data will be loaded via AJAX -->
            </tbody>
        </table>
    </div>
</div>

<script>
    // Dashboard data loading
    document.addEventListener('DOMContentLoaded', function() {
        loadDashboardData();
        updateTimestamp();
    });

    async function loadDashboardData() {
        try {
            // Load all dashboard counters in parallel
            const [driversData, clientsData, salesPersonsData, ordersData, invoicesData] = await Promise.all([
                fetchData('/dashboards/riders'),
                fetchData('/dashboards/clients'),
                fetchData('/dashboards/sales-persons'),
                fetchData('/dashboards/delivery-orders'),
                fetchData('/dashboards/invoices')
            ]);

            // Update drivers count
            updateCounter('driversCount', driversData);

            // Update clients count
            updateCounter('clientsCount', clientsData);

            // Update sales persons count
            updateCounter('salesPersonsCount', salesPersonsData);

            // Update delivery orders count
            updateCounter('ordersCount', ordersData);

            // Update invoices count with comparison
            updateInvoicesCounter(invoicesData);

        } catch (error) {
            console.error('Error loading dashboard data:', error);
            showErrorState();
        }
    }

    async function fetchData(url) {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return await response.json();
    }

    function updateCounter(elementId, count) {
        const element = document.getElementById(elementId);
        if (element) {
            // Add animation effect
            element.style.opacity = '0.5';
            setTimeout(() => {
                element.innerHTML = count.toLocaleString('es-GT');
                element.style.opacity = '1';
            }, 200);
        }
    }

    function updateInvoicesCounter(invoicesData) {
        const totalInvoices = invoicesData.invoices || 0;
        const signedInvoices = invoicesData.signedInvoices || 0;

        // Update main counter
        updateCounter('invoicesCount', totalInvoices);

        // Update progress bar and text
        const progressBar = document.getElementById('invoicesProgress');
        const progressText = document.getElementById('invoicesText');

        if (progressBar && progressText) {
            const percentage = totalInvoices > 0 ? (signedInvoices / totalInvoices) * 100 : 0;

            setTimeout(() => {
                progressBar.style.width = `${percentage}%`;
                progressText.textContent = `${signedInvoices.toLocaleString('es-GT')}/${totalInvoices.toLocaleString('es-GT')} firmadas`;
            }, 300);
        }
    }

    function showErrorState() {
        const counters = ['driversCount', 'clientsCount', 'salesPersonsCount', 'ordersCount', 'invoicesCount'];
        counters.forEach(counterId => {
            const element = document.getElementById(counterId);
            if (element) {
                element.innerHTML = '<span class="error-message">Error al cargar</span>';
            }
        });

        // Show error in progress text
        const progressText = document.getElementById('invoicesText');
        if (progressText) {
            progressText.innerHTML = '<span class="error-message">Error</span>';
        }
    }

    function updateTimestamp() {
        const now = new Date();
        const timestamp = now.toLocaleString('es-GT', {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });

        const lastUpdateElement = document.getElementById('lastUpdate');
        if (lastUpdateElement) {
            lastUpdateElement.textContent = timestamp;
        }
    }

    // Refresh dashboard every 5 minutes
    setInterval(function() {
        loadDashboardData();
        updateTimestamp();
    }, 300000); // 5 minutes
</script>

@section Scripts {
    <!-- DataTables CSS and JS -->
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.7/css/dataTables.bootstrap5.min.css">
    <script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.7/js/dataTables.bootstrap5.min.js"></script>

    <script>
        // DataTable initialization for unsigned delivery orders
        $(document).ready(function() {
            // Initialize unsigned orders table after dashboard data loads
            setTimeout(function() {
                initializeUnsignedOrdersTable();
            }, 1000);
        });

        function getUnsignedOrdersTableColumns() {
            return [
                { data: 'id' },
                {
                    data: 'status.name',
                    render: function(data, type, row) {
                        let badgeClass = '';
                        switch(data.toLowerCase()) {
                            case 'ingresado':
                                badgeClass = 'status-pending';
                                break;
                            case 'finalizado':
                                badgeClass = 'status-delivered';
                                break;
                            default:
                                badgeClass = 'status-pending';
                        }
                        return '<span class="status-badge ' + badgeClass + '">' + data + '</span>';
                    }
                },
                {
                    data: 'created',
                    render: function(data, type, row) {
                        const date = new Date(data);
                        return date.toLocaleDateString('es-ES') + ' ' + date.toLocaleTimeString('es-ES', {hour: '2-digit', minute: '2-digit'});
                    }
                },
                {
                    data: 'total',
                    render: function(data, type, row) {
                        return '$' + data.toFixed(2);
                    }
                },
                {
                    data: null,
                    orderable: false,
                    render: function(data, type, row) {
                        return '<a href="/constancias/' + row.id + '/impresion" class="btn btn-print btn-sm me-1" target="_blank">' +
                               '<i class="bi bi-printer"></i>' +
                               '</a>' +
                               '<a href="/constancias/' + row.id + '" class="btn btn-view btn-sm">' +
                               '<i class="bi bi-eye"></i>' +
                               '</a>';
                    }
                }
            ];
        }

        function initializeUnsignedOrdersTable() {
            $('#unsignedOrdersTable').DataTable({
                ajax: {
                    url: '/delivery-orders/unsigned',
                    type: 'GET',
                    dataSrc: '',
                    error: function(xhr, status, error) {
                        console.error('Error loading unsigned delivery orders:', error);
                        // Initialize empty table on error
                        $('#unsignedOrdersTable').DataTable().destroy();
                        initializeEmptyUnsignedOrdersTable();
                    }
                },
                columns: getUnsignedOrdersTableColumns(),
                language: {
                    url: 'https://cdn.datatables.net/plug-ins/1.13.7/i18n/es-ES.json',
                    loadingRecords: 'Cargando órdenes pendientes...',
                    emptyTable: 'No hay órdenes pendientes de firma',
                    zeroRecords: 'No hay órdenes pendientes de firma'
                },
                pageLength: 5,
                responsive: true,
                order: [[0, 'desc']],
                dom: '<"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6"f>>' +
                     '<"row"<"col-sm-12"tr>>' +
                     '<"row"<"col-sm-12 col-md-5"i><"col-sm-12 col-md-7"p>>'
            });
        }

        function initializeEmptyUnsignedOrdersTable() {
            $('#unsignedOrdersTable').DataTable({
                data: [],
                columns: getUnsignedOrdersTableColumns(),
                language: {
                    url: 'https://cdn.datatables.net/plug-ins/1.13.7/i18n/es-ES.json',
                    emptyTable: 'No hay órdenes pendientes de firma',
                    zeroRecords: 'No hay órdenes pendientes de firma'
                },
                pageLength: 5,
                responsive: true,
                order: [[0, 'desc']],
                dom: '<"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6"f>>' +
                     '<"row"<"col-sm-12"tr>>' +
                     '<"row"<"col-sm-12 col-md-5"i><"col-sm-12 col-md-7"p>>'
            });
        }
    </script>
}