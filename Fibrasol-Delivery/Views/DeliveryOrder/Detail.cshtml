@{
    ViewData["Title"] = "Detalle de Orden de Entrega";
}

<style>
    .page-header {
        background: linear-gradient(135deg, #4f46e5 0%, #06b6d4 100%);
        color: white;
        padding: 2rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        box-shadow: 0 8px 32px rgba(79, 70, 229, 0.3);
    }
    
    .btn-primary-custom {
        background: linear-gradient(135deg, #4f46e5 0%, #06b6d4 100%);
        border: none;
        border-radius: 8px;
        padding: 0.5rem 1.5rem;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(79, 70, 229, 0.3);
    }
    
    .btn-primary-custom:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(79, 70, 229, 0.4);
        background: linear-gradient(135deg, #3730a3 0%, #0891b2 100%);
    }
    
    .form-container {
        background: white;
        border-radius: 15px;
        padding: 2rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        margin-bottom: 2rem;
    }
    
    .form-control:focus {
        border-color: #4f46e5;
        box-shadow: 0 0 0 0.2rem rgba(79, 70, 229, 0.25);
    }
    
    .form-label {
        font-weight: 600;
        color: #374151;
        margin-bottom: 0.5rem;
    }
    
    .status-badge {
        padding: 0.5rem 1rem;
        border-radius: 25px;
        font-size: 0.875rem;
        font-weight: 600;
        display: inline-block;
    }
    
    .status-pending {
        background-color: #fef3c7;
        color: #92400e;
    }
    
    .status-in-progress {
        background-color: #dbeafe;
        color: #1e40af;
    }
    
    .status-delivered {
        background-color: #d1fae5;
        color: #065f46;
    }
    
    .status-cancelled {
        background-color: #fee2e2;
        color: #991b1b;
    }
    
    .backorder-card {
        border: 1px solid #e5e7eb;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
        background-color: #f9fafb;
    }
    
    .factura-section {
        margin-top: 1rem;
        padding-top: 1rem;
        border-top: 1px solid #d1d5db;
    }
    
    .factura-card {
        border: 1px solid #d1d5db;
        border-radius: 6px;
        padding: 0.75rem;
        margin-bottom: 0.75rem;
        background-color: #ffffff;
        position: relative;
    }
    
    .factura-header {
        background-color: #f3f4f6;
        padding: 0.5rem;
        margin: -0.75rem -0.75rem 0.75rem -0.75rem;
        border-radius: 6px 6px 0 0;
        border-bottom: 1px solid #d1d5db;
    }
    
    .btn-sm-custom {
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
    }
    
    .client-search-container {
        position: relative;
    }
    
    .client-dropdown {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 1px solid #d1d5db;
        border-top: none;
        border-radius: 0 0 6px 6px;
        max-height: 200px;
        overflow-y: auto;
        z-index: 1000;
        display: none;
    }
    
    .client-dropdown-item {
        padding: 0.5rem;
        cursor: pointer;
        border-bottom: 1px solid #f3f4f6;
    }
    
    .client-dropdown-item:hover {
        background-color: #f3f4f6;
    }
    
    .client-dropdown-item:last-child {
        border-bottom: none;
    }
    
    .client-dropdown-item.active {
        background-color: #e0e7ff;
    }
    
    .info-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem 0;
        border-bottom: 1px solid #e5e7eb;
    }
    
    .info-row:last-child {
        border-bottom: none;
    }
    
    .info-label {
        font-weight: 600;
        color: #374151;
    }
    
    .info-value {
        color: #6b7280;
    }
</style>

<div class="page-header mt-4">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1 class="mb-2"><i class="bi bi-truck me-3"></i><span id="pageTitle">Nueva Orden de Entrega</span></h1>
            <p class="mb-0 opacity-75">Gestiona los detalles de la orden de entrega</p>
        </div>
        <a href="/constancias" class="btn btn-light btn-lg">
            <i class="bi bi-arrow-left me-2"></i>Volver a Lista
        </a>
    </div>
</div>

<div class="form-container">
    <form id="deliveryOrderForm">
        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="orderId" class="form-label">ID de Orden</label>
                    <input type="text" class="form-control" id="orderId" readonly>
                </div>
            </div>
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="orderStatus" class="form-label">Estado</label>
                    <select class="form-select" id="orderStatus">
                        <option value="">Cargando estados...</option>
                    </select>
                </div>
            </div>
        </div>
        
        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="orderTotal" class="form-label">Total</label>
                    <div class="input-group">
                        <span class="input-group-text">$</span>
                        <input type="number" class="form-control" id="orderTotal" step="0.01" min="0" disabled>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="mb-4">
            <h5 class="mb-3">Comanda</h5>
            <div id="backordersContainer">
                <!-- Backorders will be loaded here -->
            </div>
            <button type="button" class="btn btn-outline-primary" onclick="addBackorder()">
                <i class="bi bi-plus-circle me-2"></i>Agregar Comanda
            </button>
        </div>
        
        <div class="d-flex justify-content-end gap-2">
            <button type="button" class="btn btn-secondary" onclick="window.location.href='/constancias'">
                Cancelar
            </button>
            <button type="button" class="btn btn-primary-custom" onclick="saveDeliveryOrder()">
                <i class="bi bi-floppy me-2"></i>Guardar Orden
            </button>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        // Get order ID from URL
        const pathParts = window.location.pathname.split('/');
        const orderId = pathParts[pathParts.length - 1];
        const isNewOrder = orderId === '0';
        
        // Global variable to track current order ID
        window.currentOrderId = isNewOrder ? null : parseInt(orderId);
        
        $(document).ready(function() {
            // Load both statuses and clients
            Promise.all([loadDeliveryStatuses(), loadClients()]).then(() => {
                if (isNewOrder) {
                    setupNewOrder();
                } else {
                    loadOrderData(parseInt(orderId));
                }
            });
        });
        
        function loadDeliveryStatuses() {
            return $.ajax({
                url: '/delivery-statuses',
                type: 'GET',
                success: function(statuses) {
                    console.log('Delivery statuses loaded:', statuses);
                    const statusSelect = $('#orderStatus');
                    statusSelect.empty();
                    
                    // Add default option
                    statusSelect.append('<option value="">Seleccione un estado</option>');
                    
                    // Add status options from database
                    statuses.forEach(function(status) {
                        statusSelect.append(`<option value="${status.id}" data-name="${status.name}">${status.name}</option>`);
                    });
                    
                    console.log('Status options added to dropdown');
                },
                error: function(xhr, status, error) {
                    console.error('Error loading delivery statuses:', error);
                    console.log('XHR Response:', xhr.responseText);
                    
                    // Fallback to static options if API fails
                    const statusSelect = $('#orderStatus');
                    statusSelect.empty();
                    statusSelect.append('<option value="">Seleccione un estado</option>');
                    statusSelect.append('<option value="1" data-name="Pendiente">Pendiente</option>');
                    statusSelect.append('<option value="2" data-name="En Progreso">En Progreso</option>');
                    statusSelect.append('<option value="3" data-name="Entregado">Entregado</option>');
                    statusSelect.append('<option value="4" data-name="Cancelado">Cancelado</option>');
                    
                    // Show error message to user
                    showErrorMessage('Error al cargar los estados. Se han cargado valores por defecto.');
                }
            });
        }
        
        function setupNewOrder() {
            document.getElementById('pageTitle').textContent = 'Nueva Constancia de Entrega';
            document.getElementById('orderId').value = 'Nuevo';
            document.getElementById('orderTotal').value = '0.00';
            
            // Create new delivery order to get ID
            createNewDeliveryOrder();
            
            addBackorder(); // Add one empty backorder by default
        }
        
        function createNewDeliveryOrder() {
            $.ajax({
                url: '/delivery-orders',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    Total: 0
                }),
                success: function(newOrderId) {
                    // Update the order ID in the form
                    document.getElementById('orderId').value = newOrderId;
                    
                    // Update the global orderId variable for save operations
                    window.currentOrderId = newOrderId;
                    
                    // Update page title
                    document.getElementById('pageTitle').textContent = 'Nueva Constancia de Entrega #' + newOrderId;
                },
                error: function(xhr, status, error) {
                    console.error('Error creating new delivery order:', error);
                    showErrorMessage('Error al crear nueva orden de entrega. Por favor, inténtelo de nuevo.');
                }
            });
        }
        
        function loadOrderData(id) {
            $.ajax({
                url: `/delivery-orders/${id}`,
                type: 'GET',
                success: function(orderData) {
                    console.log('Order data loaded:', orderData);
                    if (orderData) {
                        document.getElementById('pageTitle').textContent = 'Editar Constancia de Entrega #' + id;
                        document.getElementById('orderId').value = orderData.id;
                        document.getElementById('orderTotal').value = orderData.total.toFixed(2);
                        
                        // Set the status value - ensure dropdown is populated first
                        const statusSelect = document.getElementById('orderStatus');
                        if (orderData.statusId) {
                            console.log('Setting status to:', orderData.statusId);
                            statusSelect.value = orderData.statusId;
                            
                            // Verify the status was set
                            if (statusSelect.value !== orderData.statusId) {
                                console.warn('Status not set correctly. Available options:');
                                for (let option of statusSelect.options) {
                                    console.log(`Option value: ${option.value}, text: ${option.text}`);
                                }
                            }
                        }
                        
                        // Set the global orderId for save operations
                        window.currentOrderId = orderData.id;
                        
                        // Load backorders if they exist
                        if (orderData.backorders && orderData.backorders.length > 0) {
                            orderData.backorders.forEach(backorder => {
                                addBackorder(backorder);
                            });
                        }
                    } else {
                        // Order not found, treat as new
                        setupNewOrder();
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error loading delivery order:', error);
                    console.log('XHR Response:', xhr.responseText);
                    // On error, treat as new order
                    setupNewOrder();
                    showErrorMessage('Error al cargar la orden de entrega. Se ha iniciado una nueva orden.');
                }
            });
        }
        
        function addBackorder(data = null) {
            const backordersContainer = document.getElementById('backordersContainer');
            const backorderIndex = backordersContainer.children.length;
            
            const backorderHtml = `
                <div class="backorder-card" data-index="${backorderIndex}">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h6 class="mb-0">Comanda ${backorderIndex + 1}</h6>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeBackorder(${backorderIndex})">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <label class="form-label">Cliente</label>
                            <div class="client-search-container">
                                <input type="text" class="form-control backorder-client" value="${data ? data.client : ''}" placeholder="Buscar cliente..." autocomplete="off" onkeyup="searchClients(this)" onfocus="searchClients(this)" onblur="hideClientDropdown(this)">
                                <input type="hidden" class="backorder-client-id" value="${data ? data.clientId : ''}">
                                <div class="client-dropdown"></div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">No. Commanda</label>
                            <input type="text" class="form-control backorder-command" value="${data ? data.commandNumber : ''}" placeholder="Ingrese el número de commanda">
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Peso Total Toneladas</label>
                            <div class="input-group">
                                <input type="number" class="form-control backorder-weight" value="${data ? data.totalWeight.toFixed(3) : ''}" step="0.001" min="0" placeholder="0.000">
                                <span class="input-group-text">Ton</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="factura-section">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6 class="mb-0">Facturas</h6>
                            <button type="button" class="btn btn-sm btn-outline-primary" onclick="addFactura(${backorderIndex})">
                                <i class="bi bi-plus-circle me-1"></i>Agregar Factura
                            </button>
                        </div>
                        <div class="facturas-container" data-comanda="${backorderIndex}">
                            <!-- Facturas will be added here -->
                        </div>
                    </div>
                </div>
            `;
            
            backordersContainer.insertAdjacentHTML('beforeend', backorderHtml);
            
            // Add facturas if data exists
            if (data && data.facturas && data.facturas.length > 0) {
                data.facturas.forEach(factura => {
                    addFactura(backorderIndex, factura);
                });
            }
            
            // Update total after adding all facturas
            setTimeout(() => updateOrderTotal(), 100);
        }
        
        function removeBackorder(index) {
            const backorderCard = document.querySelector(`[data-index="${index}"]`);
            if (backorderCard) {
                backorderCard.remove();
                updateOrderTotal();
                // Reindex remaining backorders
                reindexBackorders();
            }
        }
        
        function reindexBackorders() {
            const backorders = document.querySelectorAll('.backorder-card');
            backorders.forEach((backorder, index) => {
                backorder.setAttribute('data-index', index);
                backorder.querySelector('h6').textContent = `Comanda ${index + 1}`;
                const removeBtn = backorder.querySelector('.btn-outline-danger');
                removeBtn.setAttribute('onclick', `removeBackorder(${index})`);
                
                // Update factura section data-comanda attribute
                const facturasContainer = backorder.querySelector('.facturas-container');
                facturasContainer.setAttribute('data-comanda', index);
                
                // Update addFactura button onclick
                const addFacturaBtn = backorder.querySelector('.btn-outline-primary');
                addFacturaBtn.setAttribute('onclick', `addFactura(${index})`);
            });
        }
        
        function addFactura(comandaIndex, data = null) {
            const facturasContainer = document.querySelector(`[data-comanda="${comandaIndex}"]`);
            const facturaIndex = facturasContainer.children.length;
            
            const facturaHtml = `
                <div class="factura-card" data-factura-index="${facturaIndex}">
                    <div class="factura-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <small class="fw-bold">Factura ${facturaIndex + 1}</small>
                            <button type="button" class="btn btn-sm-custom btn-outline-danger" onclick="removeFactura(${comandaIndex}, ${facturaIndex})">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <label class="form-label">Dirección</label>
                            <input type="text" class="form-control factura-direccion" value="${data ? data.direccion : ''}" placeholder="Ingrese la dirección">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Referencia</label>
                            <input type="text" class="form-control factura-reference" value="${data ? data.reference : ''}" placeholder="Ingrese la referencia">
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-md-4">
                            <label class="form-label">Valor</label>
                            <div class="input-group">
                                <span class="input-group-text">Q</span>
                                <input type="number" class="form-control factura-value" value="${data ? data.value.toFixed(2) : ''}" step="0.01" min="0" placeholder="0.00" onchange="updateOrderTotal()" oninput="updateOrderTotal()">
                            </div>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Factura</label>
                            <input type="file" class="form-control factura-file" accept=".pdf,.jpg,.jpeg,.png">
                            ${data && data.facturaFileName ? `<small class="text-muted">Archivo actual: ${data.facturaFileName}</small>` : ''}
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Factura Firmada</label>
                            <input type="file" class="form-control factura-signed-file" accept=".pdf,.jpg,.jpeg,.png">
                            ${data && data.facturaFirmadaFileName ? `<small class="text-muted">Archivo actual: ${data.facturaFirmadaFileName}</small>` : ''}
                        </div>
                    </div>
                </div>
            `;
            
            facturasContainer.insertAdjacentHTML('beforeend', facturaHtml);
            
            // Update total after adding factura
            updateOrderTotal();
        }
        
        function removeFactura(comandaIndex, facturaIndex) {
            const facturaCard = document.querySelector(`[data-comanda="${comandaIndex}"] [data-factura-index="${facturaIndex}"]`);
            if (facturaCard) {
                facturaCard.remove();
                reindexFacturas(comandaIndex);
                
                // Update total after removing factura
                updateOrderTotal();
            }
        }
        
        function reindexFacturas(comandaIndex) {
            const facturasContainer = document.querySelector(`[data-comanda="${comandaIndex}"]`);
            const facturas = facturasContainer.querySelectorAll('.factura-card');
            
            facturas.forEach((factura, index) => {
                factura.setAttribute('data-factura-index', index);
                factura.querySelector('small').textContent = `Factura ${index + 1}`;
                const removeBtn = factura.querySelector('.btn-outline-danger');
                removeBtn.setAttribute('onclick', `removeFactura(${comandaIndex}, ${index})`);
            });
        }
        
        function updateOrderTotal() {
            let totalValue = 0;
            const backorders = document.querySelectorAll('.backorder-card');
            
            backorders.forEach(backorder => {
                // Get all factura values within this comanda
                const facturaValues = backorder.querySelectorAll('.factura-value');
                facturaValues.forEach(facturaValue => {
                    const value = parseFloat(facturaValue.value) || 0;
                    totalValue += value;
                });
            });
            
            document.getElementById('orderTotal').value = totalValue.toFixed(2);
        }
        
        // Client search functionality
        let clientsData = [];
        let searchTimeout;
        
        // Load all clients on page load
        function loadClients() {
            return $.ajax({
                url: '/clients',
                type: 'GET',
                success: function(clients) {
                    clientsData = clients;
                },
                error: function(xhr, status, error) {
                    console.error('Error loading clients:', error);
                    clientsData = [];
                }
            });
        }
        
        function searchClients(input) {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                const searchTerm = input.value.toLowerCase().trim();
                const dropdown = input.parentElement.querySelector('.client-dropdown');
                
                if (searchTerm.length === 0) {
                    showAllClients(dropdown);
                    return;
                }
                
                const filteredClients = clientsData.filter(client => 
                    client.name.toLowerCase().includes(searchTerm)
                );
                
                showClientDropdown(dropdown, filteredClients, input);
            }, 300);
        }
        
        function showAllClients(dropdown) {
            showClientDropdown(dropdown, clientsData.slice(0, 10), null); // Show first 10 clients
        }
        
        function showClientDropdown(dropdown, clients, input) {
            dropdown.innerHTML = '';
            
            if (clients.length === 0) {
                dropdown.innerHTML = '<div class="client-dropdown-item">No se encontraron clientes</div>';
            } else {
                clients.forEach(client => {
                    const item = document.createElement('div');
                    item.className = 'client-dropdown-item';
                    item.textContent = client.name;
                    item.setAttribute('data-client-id', client.id);
                    
                    item.addEventListener('mousedown', function(e) {
                        e.preventDefault(); // Prevent blur event
                        selectClient(input || dropdown.parentElement.querySelector('.backorder-client'), client);
                    });
                    
                    dropdown.appendChild(item);
                });
            }
            
            dropdown.style.display = 'block';
        }
        
        function selectClient(input, client) {
            const container = input.parentElement;
            const clientIdInput = container.querySelector('.backorder-client-id');
            const dropdown = container.querySelector('.client-dropdown');
            
            input.value = client.name;
            clientIdInput.value = client.id;
            dropdown.style.display = 'none';
        }
        
        function hideClientDropdown(input) {
            setTimeout(() => {
                const dropdown = input.parentElement.querySelector('.client-dropdown');
                dropdown.style.display = 'none';
            }, 200); // Delay to allow click events to fire
        }
        
        function saveDeliveryOrder() {
            // Get the current order ID (either from URL or from created order)
            const currentId = window.currentOrderId || parseInt(orderId);
            
            if (!currentId) {
                showErrorMessage('No se ha establecido un ID de orden válido. Por favor, recargue la página.');
                return;
            }
            
            // Collect form data
            const statusSelect = document.getElementById('orderStatus');
            const selectedStatusOption = statusSelect.options[statusSelect.selectedIndex];
            
            const formData = {
                total: parseFloat(document.getElementById('orderTotal').value),
                backorders: []
            };
            
            // Collect backorders data
            const backorders = document.querySelectorAll('.backorder-card');
            backorders.forEach((backorder, backorderIndex) => {
                const client = backorder.querySelector('.backorder-client').value;
                const clientId = backorder.querySelector('.backorder-client-id').value;
                const commandNumber = backorder.querySelector('.backorder-command').value;
                const totalWeight = parseFloat(backorder.querySelector('.backorder-weight').value) || 0;
                
                // Collect facturas for this comanda
                const facturas = [];
                const facturasContainer = backorder.querySelector('.facturas-container');
                const facturaCards = facturasContainer.querySelectorAll('.factura-card');
                
                facturaCards.forEach(facturaCard => {
                    const direccion = facturaCard.querySelector('.factura-direccion').value;
                    const reference = facturaCard.querySelector('.factura-reference').value;
                    const value = parseFloat(facturaCard.querySelector('.factura-value').value) || 0;
                    const facturaFile = facturaCard.querySelector('.factura-file').files[0];
                    const facturaSignedFile = facturaCard.querySelector('.factura-signed-file').files[0];
                    
                    if (direccion && reference && value > 0) {
                        facturas.push({
                            direccion,
                            reference,
                            value,
                            facturaFile: facturaFile ? facturaFile.name : null,
                            facturaSignedFile: facturaSignedFile ? facturaSignedFile.name : null
                        });
                    }
                });
                
                if (client && commandNumber && totalWeight > 0) {
                    formData.backorders.push({
                        client,
                        clientId,
                        commandNumber,
                        totalWeight,
                        facturas
                    });
                }
            });
            
            // Validate
            if (!statusSelect.value || formData.backorders.length === 0) {
                alert('Por favor, complete todos los campos requeridos y agregue al menos una orden de entrega.');
                return;
            }
            
            // Disable save button to prevent multiple clicks
            const saveButton = document.querySelector('.btn-primary-custom');
            const originalText = saveButton.innerHTML;
            saveButton.disabled = true;
            saveButton.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status"></span>Guardando...';
            
            // Always use UpdateAsync method
            $.ajax({
                url: `/delivery-orders/${currentId}`,
                type: 'PUT',
                contentType: 'application/json',
                data: JSON.stringify(formData),
                success: function(response) {
                    // Show success message
                    showSuccessMessage('Constancia de entrega guardada correctamente');
                    
                    // Redirect to list after a short delay
                    setTimeout(function() {
                        window.location.href = '/constancias';
                    }, 1500);
                },
                error: function(xhr, status, error) {
                    console.error('Error saving delivery order:', error);
                    showErrorMessage('Error al guardar la constancia de entrega. Por favor, inténtelo de nuevo.');
                },
                complete: function() {
                    // Re-enable save button
                    saveButton.disabled = false;
                    saveButton.innerHTML = originalText;
                }
            });
        }
        
        function showSuccessMessage(message) {
            // Create and show a temporary success alert
            var alertHtml = '<div class="alert alert-success alert-dismissible fade show" role="alert">' +
                           '<i class="bi bi-check-circle me-2"></i>' + message +
                           '<button type="button" class="btn-close" data-bs-dismiss="alert"></button>' +
                           '</div>';
            
            $('.page-header').after(alertHtml);
            
            // Auto-dismiss after 3 seconds
            setTimeout(function() {
                $('.alert-success').fadeOut();
            }, 3000);
        }
        
        function showErrorMessage(message) {
            // Create and show a temporary error alert
            var alertHtml = '<div class="alert alert-warning alert-dismissible fade show" role="alert">' +
                           '<i class="bi bi-exclamation-triangle me-2"></i>' + message +
                           '<button type="button" class="btn-close" data-bs-dismiss="alert"></button>' +
                           '</div>';
            
            $('.page-header').after(alertHtml);
            
            // Auto-dismiss after 5 seconds
            setTimeout(function() {
                $('.alert-warning').fadeOut();
            }, 5000);
        }
    </script>
}
